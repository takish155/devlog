// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  password      String
  displayName  String
  image         String?

  bio            String?
  role          String    @default("user")

  following      Follow[] @relation("following")
  followingCount Int      @default(0)

  follower      Follow[] @relation("follower")
  followercount Int      @default(0)

  blogs     Blog[]
  blogCount Int    @default(0)

  likedBlogs     BlogLike[]
  likedBlogCount Int        @default(0)

  comments     BlogComment[]
  commentCount Int           @default(0)

  blogCommentLikes     BlogCommentLike[]
  blogCommentLikeCount Int               @default(0)

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  followerId  String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Blog {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  title     String
  description String
  content   String
  thumbnail String?
  tags      String[]

  likes     BlogLike[]
  likeCount Int        @default(0)

  comments     BlogComment[]
  commentCount Int           @default(0)

  staffPicked StaffPick?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StaffPick {
  id String @id @default(cuid())

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String @unique

  createdAt DateTime @default(now())
}

model BlogLike {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String

  createdAt DateTime @default(now())

  @@unique([userId, blogId])
}

model BlogComment {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String

  content String

  parentId   String?
  parent     BlogComment?  @relation("commentReplies", fields: [parentId], references: [id])
  replies    BlogComment[] @relation("commentReplies")
  childCount Int           @default(0)

  likes     BlogCommentLike[]
  likeCount Int               @default(0)

  createdAt DateTime @default(now())
}

model BlogCommentLike {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  comment   BlogComment @relation(fields: [commentId], references: [id])
  commentId String

  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
